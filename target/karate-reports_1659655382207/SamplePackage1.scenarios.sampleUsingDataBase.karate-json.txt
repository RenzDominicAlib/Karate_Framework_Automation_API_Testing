{"failedCount":1,"prefixedPath":"classpath:SamplePackage1\/scenarios\/sampleUsingDataBase.feature","packageQualifiedName":"SamplePackage1.scenarios.sampleUsingDataBase","loopIndex":-1,"relativePath":"SamplePackage1\/scenarios\/sampleUsingDataBase.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":36453400,"millis":36.4534,"status":"passed"},"step":{"comments":["# data generator"],"background":true,"line":5,"prefix":"*","index":0,"text":"def dataGenerator = Java.type('Helpers.DataGenerator')"},"stepLog":"05:40:10.972 karate.env system property was: null \n"},{"result":{"nanos":223425500,"millis":223.4255,"status":"passed"},"step":{"comments":["# use jdbc"],"background":true,"line":8,"prefix":"*","index":1,"text":"def config = {username: 'postgres', password: 'acernitro5', url: 'jdbc:postgresql:\/\/localhost:5432\/uni_students', driverClassName: 'org.postgresql.Driver'}"}},{"result":{"nanos":20291100,"millis":20.2911,"status":"passed"},"step":{"background":true,"line":9,"prefix":"*","index":2,"text":"def DbUtils = Java.type('DBUtils.DbUtils')"}},{"result":{"nanos":251598500,"millis":251.5985,"status":"passed"},"step":{"background":true,"line":10,"prefix":"*","index":3,"text":"def db = new DbUtils(config)"}},{"result":{"nanos":502986000,"millis":502.986,"status":"passed"},"step":{"line":14,"prefix":"*","index":0,"text":"def student = db.readRows('SELECT * FROM tableone')"}},{"result":{"nanos":13158400,"millis":13.1584,"status":"passed"},"step":{"line":15,"prefix":"*","index":1,"text":"print 'Students are --- ', student"},"stepLog":"05:40:12.143 [print] Students are ---  [\n  {\n    \"userid\": 1,\n    \"username\": \"Renz\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 2,\n    \"username\": \"Dominic\",\n    \"usercourse\": \"BS Electr Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 3,\n    \"username\": \"Redmonz\",\n    \"usercourse\": \"BS Civil Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 4,\n    \"username\": \"Kalvin\",\n    \"usercourse\": \"BS Civil Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 5,\n    \"username\": \"Kale\",\n    \"usercourse\": \"BS Electronics Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 6,\n    \"username\": \"Roja\",\n    \"usercourse\": \"BS Chemical Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 7,\n    \"username\": \"Lala\",\n    \"usercourse\": \"BS Sanitary Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 8,\n    \"username\": \"Dhand\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 9,\n    \"username\": \"Dhand\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 20,\n    \"username\": \"#(randomUsername)\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 18,\n    \"username\": \"Tim\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 34,\n    \"username\": \"Tim\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  },\n  {\n    \"userid\": 56,\n    \"username\": \"Pol\",\n    \"usercourse\": \"BS Mech Eng\",\n    \"userstream\": \"Engineering\"\n  }\n]\n \n"},{"result":{"nanos":8828000,"millis":8.828,"status":"passed"},"step":{"line":16,"prefix":"*","index":2,"text":"print student[0]"},"stepLog":"05:40:12.143 [print] {\n  \"userid\": 1,\n  \"username\": \"Renz\",\n  \"usercourse\": \"BS Mech Eng\",\n  \"userstream\": \"Engineering\"\n}\n \n"},{"result":{"nanos":2074700,"millis":2.0747,"status":"passed"},"step":{"line":17,"prefix":"*","index":3,"text":"print student[0].username"},"stepLog":"05:40:12.143 [print] Renz \n"},{"result":{"nanos":61172800,"millis":61.1728,"status":"passed"},"step":{"line":19,"prefix":"*","index":4,"text":"def student1Username = db.readRows('SELECT username FROM tableone WHERE userid = 1;')"}},{"result":{"nanos":3923400,"millis":3.9234,"status":"passed"},"step":{"line":20,"prefix":"*","index":5,"text":"print student1Username"},"stepLog":"05:40:12.221 [print] [\n  {\n    \"username\": \"Renz\"\n  }\n]\n \n"},{"result":{"nanos":279042700,"millis":279.0427,"status":"passed"},"step":{"line":22,"prefix":"*","index":6,"text":"def student1ID = db.readValue(\"SELECT userid FROM tableone WHERE username = 'Renz';\")"}},{"result":{"nanos":2676000,"millis":2.676,"status":"passed"},"step":{"line":23,"prefix":"*","index":7,"text":"print student1ID"},"stepLog":"05:40:12.498 [print] 1 \n"},{"result":{"nanos":72595300,"millis":72.5953,"status":"passed"},"step":{"line":25,"prefix":"*","index":8,"text":"def student1IDs = db.readRow(\"SELECT userid FROM tableone WHERE username = 'Renz';\")"}},{"result":{"nanos":4240900,"millis":4.2409,"status":"passed"},"step":{"line":26,"prefix":"*","index":9,"text":"print student1IDs"},"stepLog":"05:40:12.580 [print] {\n  \"userid\": 1\n}\n \n"},{"result":{"nanos":53110400,"millis":53.1104,"status":"passed"},"step":{"line":28,"prefix":"*","index":10,"text":"def randomID = dataGenerator.getRandomID()"}},{"result":{"nanos":2307900,"millis":2.3079,"status":"passed"},"step":{"line":29,"prefix":"*","index":11,"text":"print randomID"},"stepLog":"05:40:12.627 [print] 98872 \n"},{"result":{"nanos":997006800,"errorMessage":"js failed:\n>>>>\n01: db.insertRows(\"INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');\")\n<<<<\norg.graalvm.polyglot.PolyglotException: StatementCallback; SQL [INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');]; ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.\n- org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:247)\n- org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\n- org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1541)\n- org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:393)\n- org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:625)\n- DBUtils.DbUtils.insertRows(DbUtils.java:48)\n- <js>.:program(Unnamed:1)\n\nclasspath:SamplePackage1\/scenarios\/sampleUsingDataBase.feature:32","millis":997.0068,"status":"failed"},"step":{"comments":["# userid cannot duplicate, change it all the time before run again"],"line":32,"prefix":"*","index":12,"text":"def write = db.insertRows(\"INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');\")"},"stepLog":"05:40:13.635 classpath:SamplePackage1\/scenarios\/sampleUsingDataBase.feature:32\n* def write = db.insertRows(\"INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');\")\njs failed:\n>>>>\n01: db.insertRows(\"INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');\")\n<<<<\norg.graalvm.polyglot.PolyglotException: StatementCallback; SQL [INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');]; ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.\n- org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:247)\n- org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\n- org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1541)\n- org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:393)\n- org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:625)\n- DBUtils.DbUtils.insertRows(DbUtils.java:48)\n- <js>.:program(Unnamed:1)\n\nclasspath:SamplePackage1\/scenarios\/sampleUsingDataBase.feature:32\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":33,"prefix":"*","index":13,"text":"def updatedTableone = db.readRows('SELECT * FROM tableone')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":34,"prefix":"*","index":14,"text":"print updatedTableone"}}],"line":13,"description":"","durationMillis":2534.8918,"failed":true,"error":"js failed:\n>>>>\n01: db.insertRows(\"INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');\")\n<<<<\norg.graalvm.polyglot.PolyglotException: StatementCallback; SQL [INSERT INTO tableone (userid, username, usercourse, userstream) VALUES (56, 'Pol', 'BS Mech Eng', 'Engineering');]; ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"tableone_pkey\"\n  Detail: Key (userid)=(56) already exists.\n- org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:247)\n- org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)\n- org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1541)\n- org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:393)\n- org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:625)\n- DBUtils.DbUtils.insertRows(DbUtils.java:48)\n- <js>.:program(Unnamed:1)\n\nclasspath:SamplePackage1\/scenarios\/sampleUsingDataBase.feature:32","executorName":"main","name":"Scenario using database","startTime":1638308410386,"refId":"[1:13]","endTime":1638308413635,"exampleIndex":-1}],"callDepth":0,"name":"Feature connection to Database sampleUsingDataBase.feature","description":"","resultDate":"2021-12-01 05:40:13 am","durationMillis":2534.8918,"passedCount":0}